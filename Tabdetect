<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Tab & DevTools Detection</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            padding: 30px;
            width: 90%;
            max-width: 600px;
            text-align: center;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 2.2rem;
        }
        
        .status-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin: 25px 0;
        }
        
        .status-box {
            padding: 20px;
            border-radius: 10px;
            background: white;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .status-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .status-value {
            font-size: 1.4rem;
            font-weight: 700;
        }
        
        .safe {
            color: #27ae60;
        }
        
        .warning {
            color: #e74c3c;
        }
        
        .icon {
            font-size: 1.8rem;
        }
        
        .instructions {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-top: 25px;
            text-align: left;
        }
        
        .instructions h2 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.4rem;
        }
        
        .instructions ul {
            padding-left: 20px;
            line-height: 1.6;
        }
        
        .instructions li {
            margin-bottom: 8px;
        }
        
        .blink {
            animation: blink 1s infinite;
        }
        
        @keyframes blink {
            50% {
                opacity: 0.6;
            }
        }
        
        .counter {
            font-size: 1rem;
            margin-top: 10px;
            color: #7f8c8d;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Tab & DevTools Detection</h1>
        
        <div class="status-container">
            <div class="status-box" id="tabStatus">
                <div class="status-title">
                    <span class="icon">ðŸ“‘</span>
                    Multiple Tabs Open
                </div>
                <div class="status-value">Checking...</div>
                <div class="counter" id="tabCounter">Active tabs: 1</div>
            </div>
            
            <div class="status-box" id="devtoolsStatus">
                <div class="status-title">
                    <span class="icon">ðŸ”§</span>
                    Developer Tools Open
                </div>
                <div class="status-value">Checking...</div>
            </div>
        </div>
        
        <div class="instructions">
            <h2>Testing Instructions:</h2>
            <ul>
                <li>To test multiple tab detection: Open this page in a new tab</li>
                <li>To test DevTools detection: Open browser developer tools (F12)</li>
                <li>The detection updates in real-time without needing page refresh</li>
            </ul>
        </div>
    </div>

    <script>
        // Multi-tab detection using localStorage and BroadcastChannel
        class MultiTabDetector {
            constructor() {
                this.tabId = this.generateTabId();
                this.tabCount = 1;
                this.isMultipleTabs = false;
                this.channel = new BroadcastChannel('multi-tab-detection');
                
                this.init();
            }

            generateTabId() {
                return 'tab_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();
            }

            init() {
                // Listen for messages from other tabs
                this.channel.onmessage = (event) => {
                    if (event.data.type === 'tab-registered') {
                        this.updateTabCount();
                    } else if (event.data.type === 'tab-unregistered') {
                        this.updateTabCount(-1);
                    } else if (event.data.type === 'tab-count-request') {
                        // Respond to count requests
                        this.channel.postMessage({
                            type: 'tab-count-response',
                            tabId: this.tabId,
                            count: this.tabCount
                        });
                    } else if (event.data.type === 'tab-count-response') {
                        this.updateTabCount(event.data.count);
                    }
                };

                // Register this tab
                this.registerTab();

                // Request tab count from other tabs
                this.channel.postMessage({
                    type: 'tab-count-request',
                    tabId: this.tabId
                });

                // Set up beforeunload to clean up
                window.addEventListener('beforeunload', () => {
                    this.unregisterTab();
                });

                // Check initial state
                this.checkMultipleTabs();
                
                // Update UI
                this.updateUI();
            }

            registerTab() {
                // Store tab ID in localStorage
                const tabs = this.getActiveTabs();
                tabs[this.tabId] = Date.now();
                localStorage.setItem('activeTabs', JSON.stringify(tabs));
                
                // Broadcast to other tabs
                this.channel.postMessage({
                    type: 'tab-registered',
                    tabId: this.tabId
                });
            }

            unregisterTab() {
                const tabs = this.getActiveTabs();
                delete tabs[this.tabId];
                localStorage.setItem('activeTabs', JSON.stringify(tabs));
                
                // Broadcast to other tabs
                this.channel.postMessage({
                    type: 'tab-unregistered',
                    tabId: this.tabId
                });
            }

            getActiveTabs() {
                try {
                    const tabs = localStorage.getItem('activeTabs');
                    return tabs ? JSON.parse(tabs) : {};
                } catch (e) {
                    return {};
                }
            }

            updateTabCount(change = 1) {
                if (typeof change === 'number') {
                    this.tabCount += change;
                } else {
                    // If we received a count from another tab
                    this.tabCount = Math.max(this.tabCount, change);
                }
                
                this.isMultipleTabs = this.tabCount > 1;
                this.updateUI();
            }

            checkMultipleTabs() {
                const tabs = this.getActiveTabs();
                const now = Date.now();
                const thirtySeconds = 30000;

                // Clean up stale tabs (older than 30 seconds)
                Object.keys(tabs).forEach(tabId => {
                    if (now - tabs[tabId] > thirtySeconds) {
                        delete tabs[tabId];
                    }
                });

                localStorage.setItem('activeTabs', JSON.stringify(tabs));
                
                const activeTabCount = Object.keys(tabs).length;
                this.tabCount = activeTabCount;
                this.isMultipleTabs = activeTabCount > 1;
                
                this.updateUI();
            }

            updateUI() {
                const tabStatus = document.getElementById('tabStatus');
                const statusValue = tabStatus.querySelector('.status-value');
                const tabCounter = document.getElementById('tabCounter');
                
                tabCounter.textContent = `Active tabs: ${this.tabCount}`;
                
                if (this.isMultipleTabs) {
                    statusValue.textContent = 'YES';
                    statusValue.className = 'status-value warning';
                    tabStatus.classList.add('blink');
                } else {
                    statusValue.textContent = 'NO';
                    statusValue.className = 'status-value safe';
                    tabStatus.classList.remove('blink');
                }
            }
        }

        // DevTools detection using debugger technique
        class DevToolsDetector {
            constructor() {
                this.isOpen = false;
                this.checkInterval = null;
                this.lastTime = Date.now();
                
                this.init();
            }

            init() {
                // Start checking for DevTools
                this.checkDevTools();
                
                // Update UI initially
                this.updateUI();
            }

            checkDevTools() {
                // Clear any existing interval
                if (this.checkInterval) {
                    clearInterval(this.checkInterval);
                }
                
                // Create a debugger statement that will only be triggered when DevTools is open
                const check = () => {
                    const before = Date.now();
                    
                    // This will only pause if DevTools is open
                    debugger;
                    
                    const after = Date.now();
                    const executionTime = after - before;
                    
                    // If execution time is longer than a threshold, DevTools is likely open
                    if (executionTime > 50) {
                        if (!this.isOpen) {
                            this.isOpen = true;
                            this.updateUI();
                        }
                    } else {
                        if (this.isOpen) {
                            this.isOpen = false;
                            this.updateUI();
                        }
                    }
                };
                
                // Run check periodically
                this.checkInterval = setInterval(check, 1000);
            }

            updateUI() {
                const devtoolsStatus = document.getElementById('devtoolsStatus');
                const statusValue = devtoolsStatus.querySelector('.status-value');
                
                if (this.isOpen) {
                    statusValue.textContent = 'YES';
                    statusValue.className = 'status-value warning';
                    devtoolsStatus.classList.add('blink');
                } else {
                    statusValue.textContent = 'NO';
                    statusValue.className = 'status-value safe';
                    devtoolsStatus.classList.remove('blink');
                }
            }
        }

        // Initialize detectors when page loads
        window.addEventListener('load', () => {
            const tabDetector = new MultiTabDetector();
            const devtoolsDetector = new DevToolsDetector();
        });
    </script>
</body>
</html>
